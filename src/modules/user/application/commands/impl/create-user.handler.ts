import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Inject, Logger } from '@nestjs/common';
import * as bcrypt from 'bcryptjs';
import { DataSource } from 'typeorm';

import { CreateUserCommand } from '../create-user.command';
import { User } from '../../../domain/user.entity';
import { IUserRepository } from '../../../domain/user.interface';
import { AppError } from '../../../../../common/dtos/base-response.dto';

@CommandHandler(CreateUserCommand)
export class CreateUserHandler implements ICommandHandler<CreateUserCommand> {
    private readonly logger = new Logger(CreateUserHandler.name);

    constructor(
        @Inject('IUserRepository')
        private readonly userRepository: IUserRepository,
        private readonly dataSource: DataSource,
    ) { }

    async execute(command: CreateUserCommand): Promise<User> {
        const { createUserDto } = command;
        this.logger.log(`Creating user with username: ${createUserDto.username}`);

        return this.dataSource.transaction(async (manager) => {
            // Check if user already exists
            const existingUserByEmail = await this.userRepository.findByEmail(createUserDto.email);
            if (existingUserByEmail) {
                throw new AppError('BIZ_002', 'Email already exists');
            }

            const existingUserByUsername = await this.userRepository.findByUsername(createUserDto.username);
            if (existingUserByUsername) {
                throw new AppError('BIZ_002', 'Username already exists');
            }

            // Create new user
            const user = new User();
            // ID will be auto-generated by @BeforeInsert()
            user.username = createUserDto.username;
            user.email = createUserDto.email;
            user.passwordHash = await this.hashPassword(createUserDto.password);
            user.fullName = createUserDto.fullName;
            user.phoneNumber = createUserDto.phoneNumber;
            user.dateOfBirth = createUserDto.dateOfBirth ? new Date(createUserDto.dateOfBirth) : undefined;
            user.address = createUserDto.address;
            user.role = createUserDto.role || 'user';
            user.provinceId = createUserDto.provinceId;
            user.wardId = createUserDto.wardId;
            user.departmentId = createUserDto.departmentId;
            user.isActiveFlag = 1;
            user.createdBy = 'system'; // TODO: Get from authenticated user context

            const savedUser = await this.userRepository.save(user);

            this.logger.log(`User created successfully with ID: ${savedUser.id}`);
            return savedUser;
        });
    }

    private async hashPassword(password: string): Promise<string> {
        const saltRounds = 12;
        return bcrypt.hash(password, saltRounds);
    }
}
