version: '3.8'

services:
  # Bach Mai LIS API Application
  bach-mai-lis-api:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_HOST=192.168.7.248
      - DATABASE_PORT=1521
      - DATABASE_USERNAME=LIS_RS
      - DATABASE_PASSWORD=LIS_RS
      - DATABASE_SERVICE_NAME=orclstb
      - DATABASE_SID=orclstb
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - JWT_REFRESH_EXPIRES_IN=7d
      - KONG_GATEWAY_URL=http://kong:8000
      - KONG_API_PREFIX=KONGAPI
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - BCRYPT_ROUNDS=12
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - CORS_ORIGIN=*
      - CORS_CREDENTIALS=true
      - HEALTH_CHECK_TIMEOUT=3000
      - HEALTH_CHECK_INTERVAL=30000
    depends_on:
      - kong
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bach-mai-lis-network

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_ADMIN_GUI_LISTEN=0.0.0.0:8002
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    volumes:
      - ./kong-config.yml:/kong/declarative/kong.yml:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - bach-mai-lis-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - kong
    restart: unless-stopped
    networks:
      - bach-mai-lis-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - bach-mai-lis-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - bach-mai-lis-network

volumes:
  prometheus_data:
  grafana_data:

networks:
  bach-mai-lis-network:
    driver: bridge
